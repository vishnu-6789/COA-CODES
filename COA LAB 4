1.	Write an assembly language program to perform multiplication of 8-bit data.
org 100h                    ; Set starting address for COM program
jmp start                   ; Jump to the start label
msg:db "Multiplication of two 8-bit numbers is:", 0Dh, 0Ah, 24h
                             ; Message to display, ends with '$' for DOS interrupt 09h
start:
    mov dx,msg              ; Load the address of the message into DX
    mov ah, 09h              ; DOS interrupt to display a string (function 09h)
    int 21h                  ; Call DOS interrupt to print the message
    ; Load numbers for multiplication
    num1 db 32h              ; First number (32h = 50 decimal)
    num2 db 29h              ; Second number (29h = 41 decimal)

    mov al, num1             ; Load first number into AL
    mul num2                 ; Multiply AL by num2, result in AX (AL * num2 = AX)
    mov bx, ax               ; Store the 16-bit result from AX into BX

    ; Process and display the first hexadecimal digit (most significant nibble)
    and ax, 0F000h           ; Mask the upper nibble (first 4 bits)
    shr ax, 12               ; Shift the upper nibble to the least significant 4 bits
    add ax, 30h              ; Convert the value to ASCII by adding 30h
    cmp ax, 39h              ; Compare with ASCII '9' to check if it's a digit
    jle first_bit            ; Jump if it's less than or equal to '9'
    add ax, 7h               ; Adjust for A-F (ASCII A-F starts at 41h)
first_bit:
    mov dl, al               ; Move the ASCII value to DL for printing
    mov ah, 02h              ; DOS interrupt to print a single character (function 02h)
    int 21h                  ; Call DOS interrupt to print the first digit

    ; Process and display the second hexadecimal digit
    mov ax, bx               ; Reload the result from BX into AX
    and ax, 0F00h            ; Mask the second nibble (bits 8-11)
    shr ax, 8                ; Shift the second nibble to the least significant 4 bits
    add ax, 30h              ; Convert to ASCII
    cmp ax, 39h              ; Compare with '9'
    jle second_bit           ; Jump if less than or equal to '9'
    add ax, 7h               ; Adjust for A-F
second_bit:
    mov dl, al               ; Move to DL for printing
    mov ah, 02h              ; DOS interrupt to print a single character
    int 21h                  ; Print the second digit

    ; Process and display the third hexadecimal digit
    mov ax, bx               ; Reload the result from BX
    and ax, 00F0h            ; Mask the third nibble (bits 4-7)
    shr ax, 4                ; Shift the third nibble to the least significant 4 bits
    add ax, 30h              ; Convert to ASCII
    cmp ax, 39h              ; Compare with '9'
    jle third_bit            ; Jump if less than or equal to '9'
    add ax, 7h               ; Adjust for A-F
third_bit:
    mov dl, al               ; Move to DL for printing
    mov ah, 02h              ; DOS interrupt to print a single character
    int 21h                  ; Print the third digit

    ; Process and display the fourth hexadecimal digit (least significant nibble)
    mov ax, bx               ; Reload the result from BX
    and ax, 000Fh            ; Mask the least significant nibble (bits 0-3)
    add ax, 30h              ; Convert to ASCII
    cmp ax, 39h              ; Compare with '9'
    jle fourth_bit           ; Jump if less than or equal to '9'
    add ax, 7h               ; Adjust for A-F
fourth_bit:
    mov dl, al               ; Move to DL for printing
    mov ah, 02h              ; DOS interrupt to print a single character
    int 21h                  ; Print the fourth digit

    ; End of the program
    ret                      ; Return from the program (terminate)

2.	Write a program in assembly language to perform multiplication of 16-bit data.
org 100h           ; Set starting address

; Load two 16-bit values into AX and BX
mov ax, 12h      ; Load AX with 0012h (first number)
mov bx, 12h      ; Load BX with 0012h (second number)

; Multiply AX by BX
mul bx             ; Multiply AX by BX, result in DX:AX

; Move the lower 16 bits of the result (AX) into BX
mov bx, ax         ; BX now holds the result's lower 16 bits

; --- Convert and print the high nibble of BH (BX high byte) ---
mov ah, bh         ; Move BH (high byte of BX) to AH
shr ah, 4          ; Shift right to isolate the high nibble
add ah, 30h        ; Convert to ASCII '0'-'9'
cmp ah, 39h        ; Compare with '9'
jle print_high_nibble ; If less than or equal to '9', skip next step
add ah, 7          ; Adjust to ASCII 'A'-'F' if needed

print_high_nibble:
mov dl, ah         ; Move the ASCII value to DL
mov ah, 02h        ; Prepare for output (DOS function 02h)
int 21h            ; Print the high nibble of BH

; --- Convert and print the low nibble of BH (BX high byte) ---
mov ah, bh         ; Move BH back to AH
and ah, 0fh        ; Mask the high nibble, keep the low nibble
add ah, 30h        ; Convert to ASCII '0'-'9'
cmp ah, 39h        ; Compare with '9'
jle print_low_nibble ; If less than or equal to '9', skip next step
add ah, 7          ; Adjust to ASCII 'A'-'F' if needed

print_low_nibble:
mov dl, ah         ; Move the ASCII value to DL
mov ah, 02h        ; Prepare for output
int 21h            ; Print the low nibble of BH

; --- Convert and print the high nibble of BL (BX low byte) ---
mov ah, bl         ; Move BL (low byte of BX) to AH
shr ah, 4          ; Shift right to isolate the high nibble
add ah, 30h        ; Convert to ASCII '0'-'9'
cmp ah, 39h        ; Compare with '9'
jle print_high_nibble2 ; If less than or equal to '9', skip next step
add ah, 7          ; Adjust to ASCII 'A'-'F' if needed

print_high_nibble2:
mov dl, ah         ; Move the ASCII value to DL
mov ah, 02h        ; Prepare for output
int 21h            ; Print the high nibble of BL

; --- Convert and print the low nibble of BL (BX low byte) ---
mov ah, bl         ; Move BL back to AH
and ah, 0fh        ; Mask the high nibble, keep the low nibble
add ah, 30h        ; Convert to ASCII '0'-'9'
cmp ah, 39h        ; Compare with '9'
jle print_low_nibble2 ; If less than or equal to '9', skip next step
add ah, 7          ; Adjust to ASCII 'A'-'F' if needed

print_low_nibble2:
mov dl, ah         ; Move the ASCII value to DL
mov ah, 02h        ; Prepare for output
int 21h            ; Print the low nibble of BL

; --- Terminate the program ---
mov ah, 4Ch        ; DOS terminate function
int 21h            ; Terminate the program
